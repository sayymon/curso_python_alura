Python 

Site da python - https://www.python.org/

Site guia da instalação do python no linux - https://python.org.br/instalacao-linux/

comando instalação sudo apt-get install python3.5

Testar se o python esta instalado- which python ou which python3

Verificar a Versão do Python - python -V

Para abrir o console do python - python

Usar python online - https://repl.it/languages/python3

Documentação do Python - https://docs.python.org/3.7/tutorial/.

IDE para Python - PyCharm

Caracteristicas

Definição de variavel Ex : 
  pais = "Brasil"
  titulos = 5

Padrao da linguagem é o Snake_Case

Funções do Python : https://docs.python.org/3/library/functions.html

print(...) - Imprime texto e ou arquivos 
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

	sep - Separadores
	end - Adiciona literal no final da String

type(...) - Exibe o tipo da variavel

Interpolação de Strings

Função format

https://docs.python.org/3/library/string.html#formatexamples
https://pyformat.info/

Exemplo de Interpolação : "Tentativa {} de {}".format(1, 3)

Exemplos de Interpolação apartir do python 3.6

Esse recurso funciona da seguinte forma. Vamos imaginar que temos uma variável nome:

>>> nome = 'Matheus'
>>> print(f'Meu nome é {nome}')
Meu nome é Matheus
Quando colocamos a letra f antes das aspas, informamos ao Python que estamos utilizando uma f-string. Dessa forma o Python consegue, em tempo de execução, captar a expressão que está entre chaves ({ }) e avaliá-la.

Além de variáveis, podemos passar também de funções e métodos:

>>> nome = 'Matheus'
>>> print(f'Meu nome é {nome.lower()}')
Meu nome é matheus

Existem vários módulos no Python para resolver diversos problemas como trabalhar com arquivos, datas ou expressões regulares. Python é muito rico nesse sentido e o programador pode usufruir essas bibliotecas:

https://docs.python.org/3/library/


randrange(1, 101)


O ideal seria que pudéssemos definir um intervalo, dizer que queremos que o número gerado esteja entre 1 e 100. Como o random é um módulo, ele possui mais de uma função e a função randrange() serve exatamente para esse nosso problema. Se passarmos um parâmetro para ela, ela irá gerar um número inteiro de 0 até o valor desse parâmetro menos 1. Se passarmos dois parâmetros para ela, ela irá gerar um número inteiro do valor do primeiro parâmetro até o valor do segundo parâmetro menos 1, exatamente o que queremos!

Vamos, passando o intervalo que queremos para a função randrange(), lembrando que como queremos que o número gerado esteja entre 1 e 100 (inclusive), precisamos passar o número 101 como segundo parâmetro para a função:

import random

print("*********************************")
print("Bem vindo ao jogo de Adivinhação!")
print("*********************************")

numero_secreto = random.randrange(1, 101)
total_de_tentativas = 3

# restante do código comentado

Pseudo-Random?
Aparentemente a geração de números aleatórios funcionou muito bem. Cada vez que chamamos o random.random() ou random.randrange(..), foi gerado um outro número.

No entanto, computadores têm os seus problemas com aleatoriedade, pois são sistemas determinísticos. Em outras palavras, o nosso Python é previsível e na verdade não sabe criar números verdadeiramente aleatórios. Por isso se chama Pseudo-Random!

Por que funcionou então?
random é um função que, dada a mesma entrada, gerará o mesmo número. O truque é oferecer sempre uma entrada diferente para ter números diferentes e exatamente isso que está acontecendo por baixo dos panos.

Essa entrada também é chamada de seed (semente, em português). Entre as chamadas da função random, sempre é utilizado um novo seed. Por padrão o Python usa a hora (os milissegundos) como semente, mas nada nos impede de definir o mesmo seed antecipadamente. Para isso, existe a função seed!

Usando seed
Por exemplo, no jogo usamos a função randrange para gerar um número aleatório entre 1 e 100. Antes do randrange podemos chamar o seed para definir a entrada:

>>> random.seed(1, 101)
>>> random.randrange(100)
19
Repare que foi gerado 19 e se usarmos o mesmo seed será gerado o mesmo número:

>>> random.seed(1, 101)
>>> random.randrange(100)
19
Repare que a biblioteca random é bem previsível e por isso se chama pseudo-random!


Variaveis default :

__name__ : quando o arquivo.py é o main ele vem preenchido como __main__


__pycache__ - é sempre gerada quando executa o arquivo.py
